// ----------------------------------------------------------------------------// [b12] Java Source File: TrackLabelTransferHandler.java//                created: 09.01.2004//              $Revision: 1.1 $// ----------------------------------------------------------------------------package b12.panik.ui;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.Transferable;import java.awt.datatransfer.UnsupportedFlavorException;import java.awt.event.InputEvent;import java.io.IOException;import javax.swing.JComponent;import javax.swing.TransferHandler;class TrackLabelTransferHandler extends TransferHandler {	private static final DataFlavor FLAVOR = new DataFlavor(TrackLabel.class, "Track");	/** @see javax.swing.TransferHandler#canImport(javax.swing.JComponent, java.awt.datatransfer.DataFlavor[]) */    public boolean canImport(JComponent comp, DataFlavor[] transferFlavors) {        if (transferFlavors == null) {            return false;        }        for (int i = 0; i < transferFlavors.length; i++) {            if (FLAVOR.equals(transferFlavors[i])) {                return true;            }        }        return false;    }        /** @see javax.swing.TransferHandler#importData(javax.swing.JComponent, java.awt.datatransfer.Transferable) */    public boolean importData(JComponent comp, Transferable t) {        try {            ((DropPanel)comp).addTrackLabel((TrackLabel) t.getTransferData(FLAVOR));        } catch (UnsupportedFlavorException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return super.importData(comp, t);    }            /** @see javax.swing.TransferHandler#createTransferable(javax.swing.JComponent) */    protected Transferable createTransferable(JComponent c) {        return new TrackLabelTransferable((TrackLabel)c);    }    /** @see javax.swing.TransferHandler#getSourceActions(javax.swing.JComponent) */    public int getSourceActions(JComponent c) {        return COPY;    }        class TrackLabelTransferable implements Transferable {        TrackLabel label;                TrackLabelTransferable(TrackLabel label) {            this.label = label;        }                /** @see Transferable#getTransferDataFlavors() */        public DataFlavor[] getTransferDataFlavors() {            return new DataFlavor[] {FLAVOR};        }        /** @see Transferable#isDataFlavorSupported(DataFlavor) */        public boolean isDataFlavorSupported(DataFlavor flavor) {            return FLAVOR.equals(flavor);        }        /** @see Transferable#getTransferData(DataFlavor) */        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {            if (!isDataFlavorSupported(flavor)) {                throw new UnsupportedFlavorException(flavor);            }            return label;        }            }}
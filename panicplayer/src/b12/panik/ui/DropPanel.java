// ----------------------------------------------------------------------------// [b12] Java Source File: DropPanel.java//                created: 09.01.2004//              $Revision: 1.6 $// ----------------------------------------------------------------------------package b12.panik.ui;import java.awt.*;import java.awt.event.*;import javax.swing.JComponent;import javax.swing.JPanel;import javax.swing.border.Border;import javax.swing.border.LineBorder;/** * Panel that accept dropping TrackLabels. * @author georg */class DropPanel extends JPanel {    protected static final String PROP_NEW_TRACK = "new track";        private static final int INNER_SPACE_HEIGHT = 30;    private static final int INNER_SPACE_WIDTH = 10;        static final HorizontalDragger DRAGGER = new HorizontalDragger();    final JPanel innerPanel;    final JPanel borderPanel;    /** Creates a new instance of <code>DropPanel</code>. */    public DropPanel() {        super(null);        final Dimension dimDrop = new Dimension(300, 200);        setPreferredSize(dimDrop);        setOpaque(false); //in order to see border of panel        setTransferHandler(new TrackLabelTransferHandler());        borderPanel = new JPanel(new GridBagLayout());        borderPanel.setBackground(IConstants.COLOR_TRACKS_PANEL);        addComponentListener(new ComponentAdapter() {            public void componentResized(ComponentEvent e) {                Dimension size = getSize();                size.width -= INNER_SPACE_WIDTH;                size.height -= INNER_SPACE_HEIGHT;                borderPanel.setSize(size);                borderPanel.setLocation(4, 25);            }        });        add(borderPanel);                innerPanel = new JPanel(new GridLayout(0, 1));        innerPanel.setBackground(IConstants.COLOR_TRACKS_PANEL);        add(innerPanel);                borderPanel.add(innerPanel, new GridBagConstraints(0, 0, 1, 1, 1.0, 0,                GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL,                new Insets(0, 0, 0, 0), 0, 0));    }    void setPixelsPerSecond(int pps) {        TrackLabel.setPixelsPerSecond(pps);        repaint();    }    void addTrackLabel(TrackLabel label) {        SinglePanel small = new SinglePanel(new DynamicTrackLabel(label));        // add panel, one per row        innerPanel.add(small);        borderPanel.validate();        firePropertyChange(PROP_NEW_TRACK, null, label.getTrack());    }    /** Resets the panel to an initial state. */    void reset() {        innerPanel.removeAll();        borderPanel.validate();    }    /**     * Sets the available length in seconds.     * @param seconds the seconds.     */    public void setLength(double seconds) {        int width = getAvailableWidth();        int pixelsPerSecond = (int) (width / Math.ceil(seconds));        TrackLabel.setPixelsPerSecond(pixelsPerSecond);        // validate all SinglePanels within the innerpanel        Component[] comps = innerPanel.getComponents();        for (int i = 0; i < comps.length; i++) {            comps[i].validate();        }    }    /**     * Returns the available drawing width. This is the internal width of the     * component that is responsible for drawing the tracks in their correct     * length and at their correct position.     *       * @return the available drawing width.     */    protected int getAvailableWidth() {        int width = innerPanel.getWidth();        if (width < 1) {            width = borderPanel.getSize().width - INNER_SPACE_WIDTH - 2;        }        return width;    }    class SinglePanel extends JPanel {        private TrackLabel label;        SinglePanel(TrackLabel label) {            super(null);            this.label = label;            add(this.label);            setBackground(IConstants.COLOR_TRACKS_PANEL);            // add mousedragger            label.addMouseListener(DRAGGER);            label.addMouseMotionListener(DRAGGER);        }        void moveLabel(int x) {            final Point loc = label.getLocation();            loc.x = x;            label.setLocation(loc);        }        /** @see java.awt.Container#add(java.awt.Component) */        public Component add(Component comp) {            // set components size to its preferred size            comp.setSize(comp.getPreferredSize());            Dimension preferredSize = getPreferredSize();            // set label larger by 2 pixel, in order to have some spacing            preferredSize.height = comp.getHeight() + 2;            setPreferredSize(preferredSize);            return super.add(comp);        }        /** @see java.awt.Container#validate() */        public void validate() {            // no layout manager, set size of label manually            label.setSize(label.getPreferredSize());            super.validate();        }    }    static class HorizontalDragger extends MouseAdapter implements MouseMotionListener {        static final Color COLOR_HIGHLIGHT = new Color(0, 0, 255, 128);        static final Border BORDER_HIGHLIGHT = new LineBorder(new Color(64, 64, 255, 64), 2);        private Point pressPoint;        private JComponent component;        private Color originalColor;        private Border originalBorder;        private boolean dragging;        /** @see MouseAdapter#mousePressed(MouseEvent) */        public void mousePressed(MouseEvent e) {            pressPoint = e.getPoint();            component = (JComponent) e.getComponent();            highlightComponent();        }        /** @see MouseMotionListener#mouseDragged(MouseEvent) */        public void mouseDragged(MouseEvent e) {            // get drag location            Point dragPoint = e.getPoint();            // get current location            Point location = component.getLocation();            // change location if drag moves the frame significantly            final int difX = dragPoint.x - pressPoint.x;            if (Math.abs(difX) > 8 || dragging) {                dragging = true;                location.translate(difX, 0);                component.setLocation(location);            }        }        /** @see MouseAdapter#mouseReleased(MouseEvent) */        public void mouseReleased(MouseEvent e) {            resetComponent();            pressPoint = null;            component = null;            dragging = false;        }        /** Highlights the current component */        private void highlightComponent() {            // save original values            originalColor = component.getForeground();            originalBorder = component.getBorder();            // highlight component            component.setForeground(COLOR_HIGHLIGHT);            component.setBorder(BORDER_HIGHLIGHT);        }        /** Resets the highlight on the current component */        private void resetComponent() {            // restore original values            component.setForeground(originalColor);            component.setBorder(originalBorder);            originalColor = null;            originalBorder = null;        }        /** @see MouseMotionListener#mouseMoved(MouseEvent) */        public void mouseMoved(MouseEvent e) {            // do nothing        }    }}
<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
     [b12] Ant Build File: build.xml
                  created: 01.11.2003
                $Revision: 1.6 $
-->
<project name="Panic Player" default="run" basedir=".">
    <property file="build.properties"/>

	<!-- project's class path including necessary libraries -->
    <path id="project.classpath">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="init" description="Creates the target and deployment directories.">
        <tstamp/>
        <property name="timestamp" value="${DSTAMP}-${TSTAMP}"/>
        <mkdir dir="${dir.target}"/>
        <mkdir dir="${dir.deploy}"/>
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.build-test}"/>
    </target>

	<!--         -->
	<!-- compile -->
	<!--         -->
    <target name="compile" description="Compiles the sources." depends="init">
    	<!-- compile classes to build -->
        <javac srcdir="${src}" destdir="${dir.build}" source="1.4">
            <classpath refid="project.classpath"/>
            <exclude name="${test.sources}"/>
        </javac>
        <!-- compile test classes to test-build, remove non-test classes from dir -->
        <javac srcdir="${testsrc}" classpath="${dir.build}" destdir="${dir.build-test}" source="1.4">
            <classpath refid="project.classpath"/>
            <include name="${test.sources}"/>
        </javac>
        <delete>
            <fileset dir="${dir.build-test}">
                <include name="**/*.class"/>
                <exclude name="${test.classes}"/>
            </fileset>
        </delete>
        <!-- copy resources to classes directory -->
        <copy todir="${dir.build}" verbose="${show.output}">
            <fileset dir="${src}">
                <exclude name="**/*.java"/>
            </fileset>
            <fileset dir="${res}"/>
        </copy>
        <!-- copy test resources to test-classes directory -->
        <copy todir="${dir.build-test}" verbose="${show.output}">
            <fileset dir="${testsrc}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <!-- delete empty directories in build and test-build directories -->
        <delete includeemptydirs="true">
            <fileset dir="${dir.build}" includes="**/*">
                <size value="0" when="equal"/>
            </fileset>
            <fileset dir="${dir.build-test}" includes="**/*">
                <size value="0" when="equal"/>
            </fileset>
        </delete>
    </target>

	<!--      -->
	<!-- test -->
	<!--      -->
    <target name="test"
            description="Runs JUnit on test classes."
            depends="compile">
        <mkdir dir="${dir.reports}"/>
        <junit printsummary="${show.summary}" haltonfailure="no" showoutput="${show.output}">
            <formatter type="brief"/>
            <classpath>
                <path refid="project.classpath"/>
                <pathelement location="${dir.build}"/>
                <pathelement location="${dir.build-test}"/>
            </classpath>
            <!-- run all test classes in source tree -->
            <batchtest fork="yes" todir="${dir.reports}">
                <fileset dir="${testsrc}">
                    <include name="${test.sources}"/>
                </fileset>
            </batchtest>
        </junit>
    </target>


	<!--               -->
	<!-- distributions -->
	<!--               -->
    <target name="source-distro"
            description="Creates a source distribution."
            depends="test, javadoc">
        <!-- create tar gzip bzip2 and zip files -->
        <property name="file.name.timestamp" value="${file.sources}-${timestamp}"/>
        <tar destfile="${file.name.timestamp}.tar">
            <tarfileset dir="${src}" prefix="/src"/>
            <tarfileset dir="${testsrc}" prefix="/testsrc"/>
            <tarfileset dir="${doc}" prefix="/doc"/>
            <tarfileset dir="${res}" prefix="/res"/>
            <tarfileset dir="${lib}" prefix="/lib"/>
            <tarfileset dir="${lib.ant}" prefix="/lib_ant"/>
            <tarfileset dir="${conf}" prefix="/conf"/>
            <tarfileset dir="sounds" prefix="/sounds"/>
            <tarfileset dir=".">
                <include name="*ant*"/>
                <include name="*.properties"/>
                <include name="build.xml"/>
                <include name="javadoc.xml"/>
                <include name="README*"/>
            </tarfileset>
        </tar>
        <gzip src="${file.name.timestamp}.tar" zipfile="${file.name.timestamp}.tar.gz"/>
        <!--
        <bzip2 src="${file.name.timestamp}.tar" zipfile="${file.name.timestamp}.tar.bz2"/>
        -->
        <zip destfile="${file.name.timestamp}.zip">
            <zipfileset dir="${src}" prefix="src"/>
            <zipfileset dir="${testsrc}" prefix="testsrc"/>
            <zipfileset dir="${doc}" prefix="doc"/>
            <zipfileset dir="${res}" prefix="res"/>
            <zipfileset dir="${lib}" prefix="lib"/>
            <zipfileset dir="${lib.ant}" prefix="lib_ant"/>
            <zipfileset dir="${conf}" prefix="conf"/>
            <zipfileset dir="sounds" prefix="sounds"/>
            <zipfileset dir=".">
                <include name="*ant*"/>
                <include name="*.properties"/>
                <include name="build.xml"/>
                <include name="javadoc.xml"/>
                <include name="README*"/>
            </zipfileset>
        </zip>
    </target>
    <target name="binary-distro"
            description="Creates a binary distribution."
            depends="test">
        <jar basedir="${dir.build}"
                jarfile="${file.binaries}-${timestamp}.jar"
                manifest="${conf}/MANIFEST.MF"
                index="true"/>
    </target>

    <target name="run" description="Executes the binary distribution." depends="binary-distro">
        <java fork="true" classname="b12.panik.Massenpanik">
            <classpath>
                <path refid="project.classpath"/>
                <pathelement location="${file.binaries}-${timestamp}.jar"/>
            </classpath>
        </java>
    </target>


    <target name="deploys"
            description="Creates binary and source distribution."
            depends="binary-distro, source-distro"/>

	<!--                    -->
	<!-- Javadoc and Viewer -->
	<!--                    -->
    <target name="javadoc" description="Generates javadoc documentation.">
        <ant antfile="javadoc.xml"/>
    </target>

    <target name="javadoc-view"
            description="Opens a browser to view the generated javadoc documentation."
            depends="-cond-if,-cond-else"/>

    <target name="-check-os">
        <echo>checking os name: ${os.name}</echo>
        <condition property="windowscmd">
            <or>
                <equals arg1="${os.name}" arg2="Windows XP"/>
                <equals arg1="${os.name}" arg2="Windows 2000"/>
            </or>
        </condition>
    </target>

    <target name="-cond-if" depends="-check-os" if="windowscmd">
        <ant antfile="javadoc.xml" target="view"/>
    </target>

    <target name="-cond-else" depends="-check-os" unless="windowscmd">
        <echo>
            Currently the javadoc viewer only works for Windows XP and Windows 2000
        </echo>
    </target>


	<!--            -->
	<!-- SSH upload -->
	<!--            -->
    <target name="-enter-ssh-user" unless="ssh.user">
        <input message="Please enter ssh user for ${ssh.host}."
                addproperty="ssh.user"/>
    </target>
    <target name="-enter-ssh-pass" depends="-enter-ssh-user" unless="ssh.pass">
        <input message="Please enter ssh password for ${ssh.user}@${ssh.host}."
                addproperty="ssh.pass"/>
    </target>
    <target name="upload"
            description="Copies the source distribution to the project's ftp server."
            depends="source-distro, -enter-ssh-pass">

        <echo>transferring ${file.name.timestamp}.tar.gz to ${ssh.user}@${ssh.host}:${ssh.dir}</echo>
        <scp file="${file.name.timestamp}.tar.gz"
                todir="${ssh.user}@${ssh.host}:${ssh.dir}"
                password="${ssh.pass}"
                trust="true"/>
    </target>


    <target name="clean"
            description="Deletes created files in directory ${dir.target}">
        <delete dir="${dir.target}" verbose="${show.output}"/>
    </target>
</project>